Lexic
_____________________________

Alphabet:
	- Upper (A-Z) and lower case letters (a-z) of the English alphabet
	- Underline character '_'
	- Decimal digits
Lexic:
	- special symbols: 
		- operators: + - * / < <= = >= == <>
		- separators: [ ] { } , ; : space newline " '
		- reserved words: prog int str char read if else print do while arr const fun

	- identifiers: a sequence of letters and digits, such that the first character is 
	a letter with the rule being: 
    	letter = "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
		digit = "0" | "1" | "2" | ... | "9"
		identifier = ("_" | letter){letter | digit | "_"}

	- constants:
		int_const = "0" | [ "+" | "-" ]nz_digit{digit}
		nz_digit = "1" | "2" | ... | "9"
		strconst = {letter | digit | "_" | space}
		charconst = (letter | digit | special_char)
		special_char = "+" | "-" | "*" | "<" | ">" | etc

________________________________

Syntax.in

The words - predefined tokens are specified between " and ":
program ::= "prog {" stmtlist "}"
declaration ::= IDENTIFIER "(" type ")" [","] {declaration}
type1 ::= "char" | "int" | "str"
arraydecl ::= "arr" "(" type1 "[" INTCONST "]" ")"
type  ::= type1|arraydecl
stmtlist ::= stmt | stmt ";" stmtlist
stmt ::= simplstmt | structstmt
simplstmt ::= assignstmt | iostmt | declaration
assignstmt ::= IDENTIFIER "=" expression
expression ::= expression "+" term | expression "-" term | term
term ::= term "*" factor | term "/" factor | factor
factor ::= "(" expression ")" | IDENTIFIER | CONST
iostmt ::= "read" "(" IDENTIFIER ")" | "print" "(" IDENTIFIER ")" | "print" "(" CONST ")" 
structstmt ::= stmtlist | ifstmt | whilestmt
ifstmt ::= "if" condition "{" stmtlist "}" ["else" "{" stmtlist "}"]
whilestmt ::= "while" condition "{" stmtlist "}"
condition ::= expression RELATION expression
RELATION ::= "<" | "<=" | "==" | "<>" | ">=" | ">"

____________________________________

Token.in

A
B 
C 
D 
E 
F 
G 
H 
I 
J 
K 
L 
M 
N 
O 
P 
Q 
R 
S 
T 
U 
V 
W 
X
Y 
Z 
a 
b 
c 
d 
e 
f 
g 
h 
i 
j 
k 
l 
m 
n 
o 
p 
q 
r 
s 
t 
u 
v 
w 
x 
y 
z 
+
-
*
/
<
>
=
==
>=
<=
<>
[
]
{
}
,
;
:
space
newline
'
"
_ 
0
1
2
3
4
5
6
7
8
9
prog
int 
str 
char 
read 
if 
else 
print 
do 
while 
arr 
const 
fun

_____________________________

Review

Distinct Syntax: Uses unique operators like "$", "€", and "¥".
Extended Alphabet: Includes underline for identifier flexibility.
Lexic Diversity: Features reserved words like "adu" and "printeaza".